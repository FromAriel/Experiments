review the current current codebase assess which parts ahve and have not been implemented.

setup tasks to im plent it.

You're good, Ariel 💜 — I got you. Let's lock in a clear, scalable plan for the `HistoryTab` that:

1. **Removes the 100 test placeholders**
2. **Ensures all new entries respect UI scaling**
3. **Improves formatting for real roll results**
4. **Preps for future enhancements like crit/success/fail icons**

---

## ✅ Goal Summary

We want a **clean, scrollable history log** of all rolls, where each new roll appears at the **bottom** (or optionally top), is **dynamically scaled**, and formatted like:

```
10d10 → 10 + 1 + 7 + 6 + 5 + 7 + 5 + 5 + 5 + 6 = 57
```

Later we may enhance it with things like:

* 🟢 green text for crits
* 🔴 red text for fails
* Success count icons
* Click-to-expand detail (e.g., hover to show JSON, click to open drawer)

---

## 🔧 Implementation Plan (Step-by-Step)

### 1. **Remove the 100 dummy entries**

* Edit `HistoryTab.tscn` and delete all placeholder `Label` nodes under the `VBoxContainer` list.
* Remove `_HT_populate_dummy_IN()` or similar call from `_ready()`.
* Optional: Replace it with a single `"Roll history will appear here..."` Label with `visible=false` by default.

---

### 2. **Ensure new entries scale properly**

* Modify the code that creates new history entries so that each one:

  * Is a new `Label` node
  * Has the `UIScalable.gd` script attached
  * Sets `SC_base_font_IN` and `SC_base_size_IN` to appropriate values (match your button size: 20–24 pt font, 40–80 px height)

Example (GDScript):

```gdscript
var label = Label.new()
label.text = formatted_roll_result
label.add_theme_color_override("font_color", Color.WHITE)

# Add scaling script
label.set_script(preload("res://scripts/helpers/UIScalable.gd"))
label.SC_base_font_IN = 20
label.SC_base_size_IN = Vector2(0, 40)  # allow horizontal fill

# Add to list
$VBoxContainer.add_child(label)
```

---

### 3. **Improve formatting**

Make a helper function like this:

```gdscript
func format_roll_entry(notation: String, rolls: Array, total: int) -> String:
    var joined = " + ".join(rolls.map(str))
    return "%s → %s = %d" % [notation, joined, total]
```

Use it when a new result comes in from `RollExecutor`.

---

### 4. **Connect roll results to HistoryTab**

If not already wired:

* Connect `RollExecutor.roll_executed(notation, result)` to a method in `HistoryTab.gd`, e.g. `_on_roll_executed(notation: String, result: Dictionary)`
* Inside that method, extract `notation`, `total`, and `rolls` and call `format_roll_entry(...)`

---

### 5. **Optional polish**

* Add a scrollbar to the container if it gets long
* Automatically scroll to bottom on new entry

  ```gdscript
  await get_tree().process_frame
  $ScrollContainer.scroll_vertical = $ScrollContainer.get_v_scroll_bar().max_value
  ```

---

## 🧩 Future Extensions

| Feature                 | Concept                                                         |
| ----------------------- | --------------------------------------------------------------- |
| 🔄 Clear History        | Add a button to clear all entries                               |
| 📌 Pin Rolls            | Let users click to pin "favorite" rolls at top                  |
| 📊 Success/Fail Tracker | Use the `meta.succ`, `meta.crit`, `meta.fail` to show roll type |
| 💾 Export               | Let user copy/export roll history to clipboard or file          |
| 🧠 AI Commentary        | Add snarky GPT commentary based on extreme highs/lows?          |

---

## ✅ Deliverables Checklist

| Task                                    | Status |
| --------------------------------------- | ------ |
| ❌ Remove placeholder labels from scene  |        |
| ❌ Delete dummy population method        |        |
| ❌ Ensure new labels use `UIScalable.gd` |        |
| ❌ Add roll formatting function          |        |
| ❌ Connect to real results               |        |
| ❌ Scroll to latest entry                |        |

---
