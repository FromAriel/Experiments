=== Script Compilation ===


--- Script: res://art/shape_generator.gd ---
###############################################################
# fishtank/art/shape_generator.gd
# Key Classes      • ShapeGenerator – generates placeholder textures
# Key Functions    • SG_generate_shapes_IN() – writes ellipse and triangle images
# Dependencies     • None
# Last Major Rev   • 24-07-05 – ensure output dir exists, guard errors, DirAccess fix
###############################################################
# gdlint:disable = function-variable-name,function-name,loop-variable-name

class_name ShapeGenerator
extends Node

const SG_ART_DIR := "res://art"

func SG_generate_shapes_IN() -> void:
    # Ensure the art directory exists (important on a fresh checkout / export).
    var sg_dir = DirAccess.open("res://")
    if sg_dir == null:
        push_error("ShapeGenerator: Could not access base directory (res://)")
        return
    var SG_dir_err = sg_dir.make_dir_recursive("art")
    if SG_dir_err != OK and SG_dir_err != ERR_ALREADY_EXISTS:
        push_error("ShapeGenerator: Cannot create directory %s (err %d)" % [SG_ART_DIR, SG_dir_err])
        return

    var SG_ellipse_image_UP := _SG_create_ellipse_IN(64, 32, Color.WHITE)
    SG_ellipse_image_UP.save_png("%s/ellipse_placeholder.png" % SG_ART_DIR)

    var SG_triangle_image_UP := _SG_create_triangle_IN(64, 64, Color.WHITE)
    SG_triangle_image_UP.save_png("%s/triangle_placeholder.png" % SG_ART_DIR)

func _SG_create_ellipse_IN(width: int, height: int, color: Color) -> Image:
    var SG_img_UP := Image.create(width, height, false, Image.FORMAT_RGBA8)
    SG_img_UP.fill(Color.TRANSPARENT)
    var SG_rx_UP := width / 2.0
    var SG_ry_UP := height / 2.0
    for SG_y_IN in range(height):
        for SG_x_IN in range(width):
            var SG_dx_UP: float = (SG_x_IN - SG_rx_UP + 0.5) / SG_rx_UP
            var SG_dy_UP: float = (SG_y_IN - SG_ry_UP + 0.5) / SG_ry_UP
            if SG_dx_UP * SG_dx_UP + SG_dy_UP * SG_dy_UP <= 1.0:
                SG_img_UP.set_pixel(SG_x_IN, SG_y_IN, color)
    return SG_img_UP

func _SG_create_triangle_IN(width: int, height: int, color: Color) -> Image:
    var SG_img_UP := Image.create(width, height, false, Image.FORMAT_RGBA8)
    SG_img_UP.fill(Color.TRANSPARENT)
    var SG_center_UP := width / 2.0
    for SG_y_IN in range(height):
        var SG_ratio_UP: float = float(SG_y_IN) / max(height - 1, 1)
        var SG_half_width_UP: float = (width * SG_ratio_UP) / 2.0
        for SG_x_IN in range(width):
            if abs(SG_x_IN - SG_center_UP) <= SG_half_width_UP:
                SG_img_UP.set_pixel(SG_x_IN, SG_y_IN, color)
    return SG_img_UP
# gdlint:enable = function-variable-name,function-name,loop-variable-name


--- Script: res://scripts/boids/boid_fish.gd ---
###############################################################
# fishtank/scripts/boids/boid_fish.gd
# Key Classes      • BoidFish – minimal boid entity
# Dependencies     • fish_archetype.gd, tank_environment.gd
# Last Major Rev   • 24-07-05 – auto-spawn placeholder sprite, null-safety
###############################################################
# gdlint:disable = class-variable-name,function-name,function-variable-name

class_name BoidFish
extends Node2D

const TankEnvironment = preload("res://scripts/data/tank_environment.gd")

var BF_velocity_UP: Vector2 = Vector2.ZERO
var BF_archetype_IN: FishArchetype
var BF_group_id_SH: int = 0
var BF_isolated_timer_UP: float = 0.0
var BF_depth_UP: float = 0.0
var BF_environment_IN: TankEnvironment


func _ready() -> void:
    set_process(true)
    _BF_ensure_visual_IN()


func _process(_delta: float) -> void:
    if BF_velocity_UP != Vector2.ZERO:
        rotation = BF_velocity_UP.angle()

    if BF_environment_IN != null:
        _BF_apply_depth_IN()


# --------------------------------------------------------------
# Helpers
# --------------------------------------------------------------
func _BF_ensure_visual_IN() -> void:
    # Add a simple Sprite2D if the scene file didn't include one,
    # preventing null texture crashes and giving us something to see.
    if get_node_or_null("Sprite2D") != null:
        return  # already has a sprite

    var sprite := Sprite2D.new()
    sprite.name = "Sprite2D"
    sprite.centered = true
    var tex_path := "res://art/ellipse_placeholder.png"
    if ResourceLoader.exists(tex_path):
        sprite.texture = load(tex_path)
    add_child(sprite)


func _BF_apply_depth_IN() -> void:
    var BF_ratio_UP: float = clamp(
        (BF_environment_IN.TE_size_IN.z - BF_depth_UP) / BF_environment_IN.TE_size_IN.z,
        0.0,
        1.0,
    )

    # Scale
    var BF_scale_UP: float = lerp(0.5, 1.0, BF_ratio_UP)
    scale = Vector2.ONE * BF_scale_UP

    # Tint / opacity
    var BF_col := modulate
    BF_col.a = lerp(0.4, 1.0, BF_ratio_UP)
    modulate = BF_col


--- Script: res://scripts/boids/boid_system.gd ---
###############################################################
# fishtank/scripts/boids/boid_system.gd
# Key Classes      • BoidSystem – manages fish boids
# Key Functions    • BS_spawn_population_IN() – instantiate fish
#                   • _physics_process() – update boids
#                   • _BS_update_fish_IN() – group‐preferred flocking, soft & hard walls
# Critical Consts  • BS_neighbor_radius_IN: float
# Dependencies     • boid_system_config.gd, fish_archetype.gd, boid_fish.gd
# Last Major Rev   • 25-07-05 – combines fallback scene, color groups, z-depth, robust spawn
###############################################################
# gdlint:disable = class-variable-name,function-name,function-variable-name,loop-variable-name

class_name BoidSystem
extends Node2D

@export var BS_config_IN: BoidSystemConfig
@export var BS_fish_scene_IN: PackedScene
@export var BS_neighbor_radius_IN: float = 80.0
@export var BS_separation_distance_IN: float = 40.0
@export var BS_environment_IN: TankEnvironment
@export var BS_group_count_IN: int = 5   # at least 5 groups
@export var BS_group_preference_weight_IN: float = 2.0

# Soft‐repulsion parameters
@export var BS_boundary_margin_IN: float = 50.0
@export var BS_boundary_force_IN: float = 100.0

# Hard‐wall parameters
@export var BS_hard_margin_IN: float = 20.0
@export var BS_hard_decel_IN: float = 200.0

@export var BS_grid_cell_size_IN: float = 100.0

# Tint colors for each group (cyclic if >6 groups)
var BS_group_colors := [
    Color(1, 0, 0),   # red
    Color(0, 1, 0),   # green
    Color(0, 0, 1),   # blue
    Color(1, 1, 0),   # yellow
    Color(1, 0, 1),   # magenta
    Color(0, 1, 1)    # cyan
]

var BS_fish_nodes_SH: Array[BoidFish] = []
var BS_rng_UP := RandomNumberGenerator.new()
var BS_grid_SH: Dictionary = {}

func _ready() -> void:
    if BS_config_IN == null:
        BS_config_IN = BoidSystemConfig.new()
    _BS_ensure_fish_scene_exists_IN()
    if BS_environment_IN == null:
        var parent = get_parent()
        if parent is FishTank:
            BS_environment_IN = (parent as FishTank).FT_environment_IN
        else:
            BS_environment_IN = TankEnvironment.new()
    BS_rng_UP.randomize()

func _BS_ensure_fish_scene_exists_IN() -> void:
    if BS_fish_scene_IN != null and is_instance_valid(BS_fish_scene_IN):
        return  # user-provided scene is fine
    # Try to load the default scene path first
    var default_path := "res://scenes/BoidFish.tscn"
    if ResourceLoader.exists(default_path):
        BS_fish_scene_IN = load(default_path)
        if BS_fish_scene_IN != null:
            return
    # Fallback: build an in-memory PackedScene so the simulation never crashes
    var root := load("res://scripts/boids/boid_fish.gd").new() as Node2D
    var sprite := Sprite2D.new()
    sprite.centered = true
    var tex_path := "res://art/ellipse_placeholder.png"
    if ResourceLoader.exists(tex_path):
        sprite.texture = load(tex_path)
    root.add_child(sprite)
    var ps := PackedScene.new()
    var err := ps.pack(root)
    if err == OK:
        BS_fish_scene_IN = ps
    else:
        push_error("BoidSystem: Failed to build fallback fish scene! (err %d)" % err)

func BS_spawn_population_IN(archetypes: Array[FishArchetype]) -> void:
    if archetypes.is_empty():
        return
    var count: int = BS_rng_UP.randi_range(
        BS_config_IN.BC_fish_count_min_IN,
        BS_config_IN.BC_fish_count_max_IN
    )
    for i in range(count):
        var arch: FishArchetype = archetypes[BS_rng_UP.randi_range(0, archetypes.size() - 1)]
        _BS_spawn_fish_IN(arch)

func _BS_spawn_fish_IN(arch: FishArchetype) -> void:
    var fish: BoidFish
    if BS_fish_scene_IN != null and is_instance_valid(BS_fish_scene_IN):
        fish = BS_fish_scene_IN.instantiate() as BoidFish
    else:
        fish = load("res://scripts/boids/boid_fish.gd").new()
    # Position & depth
    if BS_environment_IN != null:
        var b: AABB = BS_environment_IN.TE_boundaries_SH
        var center: Vector3 = b.position + b.size * 0.5
        fish.position = Vector2(center.x, center.y)
        fish.BF_depth_UP = BS_rng_UP.randf_range(0.0, BS_environment_IN.TE_size_IN.z)
        fish.BF_environment_IN = BS_environment_IN
    else:
        fish.position = Vector2(BS_rng_UP.randf_range(-50, 50), BS_rng_UP.randf_range(-30, 30))
        fish.BF_depth_UP = 0.0
    # assign group and tint
    fish.BF_group_id_SH = BS_rng_UP.randi_range(0, BS_group_count_IN - 1)
    var ci = fish.BF_group_id_SH % BS_group_colors.size()
    fish.modulate = BS_group_colors[ci]
    fish.BF_archetype_IN = arch
    add_child(fish)
    BS_fish_nodes_SH.append(fish)

func _physics_process(delta: float) -> void:
    _BS_update_grid_IN()
    for fish in BS_fish_nodes_SH:
        _BS_update_fish_IN(fish, delta)
        _BS_apply_sanity_check_IN(fish, delta)

func _BS_update_grid_IN() -> void:
    BS_grid_SH.clear()
    for fish in BS_fish_nodes_SH:
        var cell = Vector2i(
            floor(fish.position.x / BS_grid_cell_size_IN),
            floor(fish.position.y / BS_grid_cell_size_IN)
        )
        if not BS_grid_SH.has(cell):
            BS_grid_SH[cell] = []
        BS_grid_SH[cell].append(fish)

func _BS_update_fish_IN(fish: BoidFish, delta: float) -> void:
    # gather neighbor sums
    var same_sep = Vector2.ZERO
    var same_ali = Vector2.ZERO
    var same_coh = Vector2.ZERO
    var same_count = 0
    var all_sep = Vector2.ZERO
    var all_ali = Vector2.ZERO
    var all_coh = Vector2.ZERO
    var all_count = 0

    var cell = Vector2i(
        floor(fish.position.x / BS_grid_cell_size_IN),
        floor(fish.position.y / BS_grid_cell_size_IN)
    )
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            var key = Vector2i(cell.x + dx, cell.y + dy)
            if not BS_grid_SH.has(key):
                continue
            for other in BS_grid_SH[key]:
                if other == fish:
                    continue
                var diff: Vector2 = other.position - fish.position
                var dist: float = diff.length()
                if dist < BS_neighbor_radius_IN:
                    all_ali += other.BF_velocity_UP
                    all_coh += other.position
                    all_count += 1
                    if dist < BS_separation_distance_IN and dist > 0.0:
                        all_sep -= diff / dist
                    if other.BF_group_id_SH == fish.BF_group_id_SH:
                        same_ali += other.BF_velocity_UP
                        same_coh += other.position
                        same_count += 1
                        if dist < BS_separation_distance_IN and dist > 0.0:
                            same_sep -= diff / dist

    # decide which to use (group preference)
    var use_ali: Vector2
    var use_coh: Vector2
    var use_sep: Vector2
    var use_count: int
    var weight_mult: float
    if same_count > 0:
        use_ali = same_ali
        use_coh = same_coh
        use_sep = same_sep
        use_count = same_count
        weight_mult = BS_group_preference_weight_IN
    else:
        use_ali = all_ali
        use_coh = all_coh
        use_sep = all_sep
        use_count = all_count
        weight_mult = 1.0

    var steer = Vector2.ZERO
    if use_count > 0:
        # alignment
        var ali_vec = (use_ali / use_count).normalized() * BS_config_IN.BC_max_speed_IN - fish.BF_velocity_UP
        ali_vec = ali_vec.limit_length(BS_config_IN.BC_max_force_IN)
        # cohesion
        var coh_vec = (use_coh / use_count) - fish.position
        if coh_vec != Vector2.ZERO:
            coh_vec = coh_vec.normalized() * BS_config_IN.BC_max_speed_IN - fish.BF_velocity_UP
            coh_vec = coh_vec.limit_length(BS_config_IN.BC_max_force_IN)
        # separation
        var sep_vec = use_sep / use_count
        if sep_vec != Vector2.ZERO:
            sep_vec = sep_vec.normalized() * BS_config_IN.BC_max_speed_IN - fish.BF_velocity_UP
            sep_vec = sep_vec.limit_length(BS_config_IN.BC_max_force_IN)

        steer += ali_vec * BS_config_IN.BC_default_alignment_IN * weight_mult
        steer += coh_vec * BS_config_IN.BC_default_cohesion_IN * weight_mult
        steer += sep_vec * BS_config_IN.BC_default_separation_IN * weight_mult
        fish.BF_isolated_timer_UP = 0.0
    else:
        fish.BF_isolated_timer_UP += delta

    # wander
    var wander_vec = Vector2(
        BS_rng_UP.randf_range(-1.0, 1.0),
        BS_rng_UP.randf_range(-1.0, 1.0)
    ).normalized() * BS_config_IN.BC_default_wander_IN * BS_config_IN.BC_max_force_IN
    steer += wander_vec

    # soft‐wall repulsion
    if BS_environment_IN != null:
        var b = BS_environment_IN.TE_boundaries_SH
        var eff_min_x = b.position.x + BS_hard_margin_IN
        var eff_max_x = b.position.x + b.size.x - BS_hard_margin_IN
        var eff_min_y = b.position.y + BS_hard_margin_IN
        var eff_max_y = b.position.y + b.size.y - BS_hard_margin_IN

        var soft_min_x = eff_min_x + BS_boundary_margin_IN
        var soft_max_x = eff_max_x - BS_boundary_margin_IN
        var soft_min_y = eff_min_y + BS_boundary_margin_IN
        var soft_max_y = eff_max_y - BS_boundary_margin_IN

        if fish.position.x < soft_min_x:
            var d = (soft_min_x - fish.position.x) / BS_boundary_margin_IN
            steer.x += BS_boundary_force_IN * d
        elif fish.position.x > soft_max_x:
            var d = (fish.position.x - soft_max_x) / BS_boundary_margin_IN
            steer.x -= BS_boundary_force_IN * d

        if fish.position.y < soft_min_y:
            var dY = (soft_min_y - fish.position.y) / BS_boundary_margin_IN
            steer.y += BS_boundary_force_IN * dY
        elif fish.position.y > soft_max_y:
            var dY = (fish.position.y - soft_max_y) / BS_boundary_margin_IN
            steer.y -= BS_boundary_force_IN * dY

    # apply movement
    var velocity = (fish.BF_velocity_UP + steer * delta).limit_length(BS_config_IN.BC_max_speed_IN)
    fish.position += velocity * delta
    fish.BF_velocity_UP = velocity

    # hard‐wall deceleration
    if BS_environment_IN != null:
        var b2 = BS_environment_IN.TE_boundaries_SH
        var eff_min_x2 = b2.position.x + BS_hard_margin_IN
        var eff_max_x2 = b2.position.x + b2.size.x - BS_hard_margin_IN
        var eff_min_y2 = b2.position.y + BS_hard_margin_IN
        var eff_max_y2 = b2.position.y + b2.size.y - BS_hard_margin_IN

        if fish.position.x < eff_min_x2:
            fish.position.x = eff_min_x2
            if fish.BF_velocity_UP.x < 0:
                fish.BF_velocity_UP.x = min(fish.BF_velocity_UP.x + BS_hard_decel_IN * delta, 0)
        elif fish.position.x > eff_max_x2:
            fish.position.x = eff_max_x2
            if fish.BF_velocity_UP.x > 0:
                fish.BF_velocity_UP.x = max(fish.BF_velocity_UP.x - BS_hard_decel_IN * delta, 0)

        if fish.position.y < eff_min_y2:
            fish.position.y = eff_min_y2
            if fish.BF_velocity_UP.y < 0:
                fish.BF_velocity_UP.y = min(fish.BF_velocity_UP.y + BS_hard_decel_IN * delta, 0)
        elif fish.position.y > eff_max_y2:
            fish.position.y = eff_max_y2
            if fish.BF_velocity_UP.y > 0:
                fish.BF_velocity_UP.y = max(fish.BF_velocity_UP.y - BS_hard_decel_IN * delta, 0)

    # depth jitter (fakey z)
    var max_z = 0.0
    if BS_environment_IN != null:
        max_z = BS_environment_IN.TE_size_IN.z
    fish.BF_depth_UP = clamp(
        fish.BF_depth_UP + BS_rng_UP.randf_range(-20.0, 20.0) * delta,
        0.0,
        max_z
    )

func _BS_get_weight_IN(arch: FishArchetype, field: String, default_val: float) -> float:
    if arch != null:
        var val = arch.get(field)
        if typeof(val) == TYPE_FLOAT:
            return val
    return default_val

func _BS_apply_sanity_check_IN(fish: BoidFish, delta: float) -> void:
    if BS_environment_IN == null:
        return
    var b = BS_environment_IN.TE_boundaries_SH
    var center = b.position + b.size * 0.5
    var min_x = b.position.x
    var max_x = b.position.x + b.size.x
    var min_y = b.position.y
    var max_y = b.position.y + b.size.y
    var margin = BS_boundary_margin_IN * 0.5
    var near_edge = fish.position.x < min_x + margin or fish.position.x > max_x - margin \
        or fish.position.y < min_y + margin or fish.position.y > max_y - margin
    var outside = fish.position.x < min_x or fish.position.x > max_x \
        or fish.position.y < min_y or fish.position.y > max_y
    if near_edge or outside:
        var push_dir = (Vector2(center.x, center.y) - fish.position).normalized()
        fish.BF_velocity_UP = fish.BF_velocity_UP.move_toward(
            push_dir * BS_config_IN.BC_max_speed_IN,
            delta * 2.0
        )
# gdlint:enable = class-variable-name,function-name,function-variable-name,loop-variable-name


--- Script: res://scripts/data/archetype_loader.gd ---
###############################################################
# fishtank/scripts/data/archetype_loader.gd
# Key Classes      • ArchetypeLoader – loads archetype data
# Key Functions    • AL_load_archetypes_IN() – parse JSON to resources
# Critical Consts  • AL_default_texture_IN: Texture2D
# Editor Exports   • None
# Dependencies     • fish_archetype.gd
# Last Major Rev   • 24-06-28 – initial creation
###############################################################
# gdlint:disable = class-variable-name,function-name,function-variable-name,loop-variable-name

class_name ArchetypeLoader
extends Node

var AL_default_texture_IN: Texture2D


func _init() -> void:
    var AL_shape_gen_UP: Node = load("res://art/shape_generator.gd").new()
    AL_shape_gen_UP.SG_generate_shapes_IN()
    var AL_default_path_UP := "res://art/ellipse_placeholder.png"
    if ResourceLoader.exists(AL_default_path_UP):
        AL_default_texture_IN = load(AL_default_path_UP)
    else:
        AL_default_texture_IN = preload("res://art/placeholder_fish.png")


func AL_load_archetypes_IN(json_path: String) -> Array[FishArchetype]:
    var AL_archetypes_UP: Array[FishArchetype] = []
    if not FileAccess.file_exists(json_path):
        push_error("Archetype JSON not found: %s" % json_path)
        return AL_archetypes_UP

    var AL_json_string_UP = FileAccess.get_file_as_string(json_path)
    var AL_parser_UP := JSON.new()
    var AL_error_UP = AL_parser_UP.parse(AL_json_string_UP)
    if AL_error_UP != OK:
        push_error("Failed to parse %s: %s" % [json_path, AL_error_UP])
        return AL_archetypes_UP

    for AL_entry_UP in AL_parser_UP.data:
        var AL_resource_UP := FishArchetype.new()
        AL_resource_UP.FA_name_IN = AL_entry_UP.get("name", "")
        AL_resource_UP.FA_species_list_IN = []
        for AL_species_UP in AL_entry_UP.get("species_list", []):
            AL_resource_UP.FA_species_list_IN.append(str(AL_species_UP))

        var AL_tex_path_UP: String = AL_entry_UP.get("placeholder_texture", "")
        if AL_tex_path_UP != "" and ResourceLoader.exists(AL_tex_path_UP):
            AL_resource_UP.FA_placeholder_texture_IN = load(AL_tex_path_UP)
        else:
            AL_resource_UP.FA_placeholder_texture_IN = AL_default_texture_IN

        AL_resource_UP.FA_base_color_IN = Color(AL_entry_UP.get("base_color", "#ffffff"))
        AL_archetypes_UP.append(AL_resource_UP)

    return AL_archetypes_UP
# gdlint:enable = class-variable-name,function-name,function-variable-name,loop-variable-name


--- Script: res://scripts/data/boid_system_config.gd ---
###############################################################
# fishtank/scripts/data/boid_system_config.gd
# Key Classes      • BoidSystemConfig – default boid parameters
# Key Functions    • N/A
# Critical Consts  • None
# Editor Exports   • BC_default_alignment_IN: float
# Dependencies     • None
# Last Major Rev   • 24-06-28 – initial creation
###############################################################

class_name BoidSystemConfig
extends Resource

# gdlint:disable = class-variable-name

"""
Configurable constants controlling the default boid behavior parameters.
"""

@export var BC_default_alignment_IN: float = 1.0
@export var BC_default_cohesion_IN: float = 1.0
@export var BC_default_separation_IN: float = 1.5
@export var BC_default_wander_IN: float = 0.5
@export var BC_max_speed_IN: float = 200.0
@export var BC_max_force_IN: float = 50.0
@export var BC_fish_count_min_IN: int = 50
@export var BC_fish_count_max_IN: int = 60
@export var BC_archetype_count_min_IN: int = 3
@export var BC_archetype_count_max_IN: int = 5
@export var BC_misc_params_SH: Dictionary = {}
# gdlint:enable = class-variable-name


--- Script: res://scripts/data/fish_archetype.gd ---
###############################################################
# fishtank/scripts/data/fish_archetype.gd
# Key Classes      • FishArchetype – archetype configuration
# Key Functions    • N/A
# Critical Consts  • None
# Editor Exports   • FA_name_IN: String
#                   • FA_behavior_IN: int
# Dependencies     • None
# Last Major Rev   • 24-06-28 – initial creation
###############################################################

class_name FishArchetype
extends Resource

# gdlint:disable = class-variable-name

"""
Holds configuration data defining behaviors and visuals for a fish archetype.

The `FA_behavior_IN` field specifies the default `FishBehavior` for fish using
this archetype. Values correspond to the enum defined in `BoidFish`.
"""

@export var FA_name_IN: String = ""
@export var FA_species_list_IN: Array[String] = []
@export var FA_placeholder_texture_IN: Texture2D
@export var FA_base_color_IN: Color = Color.WHITE
@export var FA_size_IN: float = 1.0
@export var FA_group_tendency_IN: float = 0.5
@export var FA_preferred_zone_IN: Vector3 = Vector3.ZERO
@export var FA_activity_pattern_IN: String = ""
@export var FA_aggression_level_IN: float = 0.0
@export var FA_alignment_weight_IN: float = 1.0
@export var FA_cohesion_weight_IN: float = 1.0
@export var FA_separation_weight_IN: float = 1.5
@export var FA_wander_weight_IN: float = 0.5
@export var FA_obstacle_bias_IN: float = 1.0
@export var FA_display_chance_IN: float = 0.0
@export var FA_burst_chance_IN: float = 0.0
@export var FA_chase_chance_IN: float = 0.0
@export var FA_jump_chance_IN: float = 0.0
@export var FA_rest_chance_IN: float = 0.0
@export var FA_behavior_IN: int = 0
@export var FA_special_notes_IN: String = ""
# gdlint:enable = class-variable-name


--- Script: res://scripts/data/fish_instance.gd ---
###############################################################
# fishtank/scripts/data/fish_instance.gd
# Key Classes      • FishInstance – runtime fish data
# Key Functions    • N/A
# Critical Consts  • None
# Editor Exports   • FI_unique_id_IN: int
# Dependencies     • FishArchetype
# Last Major Rev   • 24-06-28 – initial creation
###############################################################

class_name FishInstance
extends Resource

# gdlint:disable = class-variable-name

"""
Data container for a single fish in the tank at runtime.
"""

@export var FI_unique_id_IN: int = 0
@export var FI_position_UP: Vector3 = Vector3.ZERO
@export var FI_velocity_UP: Vector3 = Vector3.ZERO
@export var FI_state_SH: String = ""
@export var FI_archetype_ref_SH: FishArchetype
@export var FI_assigned_species_IN: String = ""
@export var FI_age_UP: float = 0.0
@export var FI_animation_state_UP: String = ""
@export var FI_selected_SH: bool = false
# gdlint:enable = class-variable-name


--- Script: res://scripts/data/tank_environment.gd ---
###############################################################
# fishtank/scripts/data/tank_environment.gd
# Key Classes      • TankEnvironment – tank parameters and population
# Key Functions    • TE_update_bounds_IN() – calculate tank AABB
# Critical Consts  • None
# Editor Exports   • TE_size_IN: Vector3
# Dependencies     • FishInstance
# Last Major Rev   • 24-06-30 – compute tank bounds
###############################################################

class_name TankEnvironment
extends Resource

# gdlint:disable = class-variable-name,function-name

"""
Encapsulates the environment settings and fish population of the aquarium.
"""

@export var TE_size_IN: Vector3 = Vector3(16.0, 9.0, 5.5)
@export var TE_boundaries_SH: AABB = AABB()
@export var TE_decor_objects_SH: Array[PackedScene] = []
@export var TE_lighting_params_IN: Dictionary = {}
@export var TE_water_params_IN: Dictionary = {}
@export var TE_population_SH: Array[FishInstance] = []


func _init() -> void:
    TE_update_bounds_IN()


func TE_update_bounds_IN() -> void:
    TE_boundaries_SH = AABB(
        Vector3(-TE_size_IN.x / 2.0, -TE_size_IN.y / 2.0, -TE_size_IN.z / 2.0), TE_size_IN
    )
# gdlint:enable = class-variable-name,function-name


--- Script: res://scripts/fish_tank.gd ---
###############################################################
# fishtank/scripts/fish_tank.gd
# Key Classes      • FishTank – root controller for the aquarium
# Key Functions    • _ready() – initialize tank and debug overlay
#                   FT_apply_depth_IN() – apply pseudo-3D transform
# Dependencies     • archetype_loader.gd, tank_environment.gd
# Last Major Rev   • 24-07-05 – robust node look-ups, auto-create overlay & system
###############################################################
# gdlint:disable = class-variable-name,function-name,function-variable-name

class_name FishTank
extends Node2D

@export var FT_environment_IN: TankEnvironment
var FT_overlay_label_UP: Label


func _ready() -> void:
    _FT_ensure_debug_overlay_IN()

    if FT_environment_IN == null:
        FT_environment_IN = TankEnvironment.new()

    _FT_update_environment_bounds_IN()

    # --- Load archetypes ----------------------------------------------------
    var FT_loader_IN := ArchetypeLoader.new()
    var FT_archetypes_UP := FT_loader_IN.AL_load_archetypes_IN("res://data/archetypes.json")

    # --- Boid system --------------------------------------------------------
    var FT_boid_system_UP: BoidSystem = get_node_or_null("BoidSystem")
    if FT_boid_system_UP == null:
        FT_boid_system_UP = BoidSystem.new()
        FT_boid_system_UP.name = "BoidSystem"
        add_child(FT_boid_system_UP)

    if FT_boid_system_UP.BS_config_IN == null:
        FT_boid_system_UP.BS_config_IN = BoidSystemConfig.new()

    FT_boid_system_UP.BS_spawn_population_IN(FT_archetypes_UP)

    if FT_overlay_label_UP != null:
        FT_overlay_label_UP.text = "Loaded %d archetypes" % FT_archetypes_UP.size()


# ---------------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------------
func _FT_ensure_debug_overlay_IN() -> void:
    FT_overlay_label_UP = get_node_or_null("DebugOverlay/DebugLabel") as Label
    if FT_overlay_label_UP != null:
        return  # overlay already present

    var overlay := CanvasLayer.new()
    overlay.name = "DebugOverlay"
    add_child(overlay)

    FT_overlay_label_UP = Label.new()
    FT_overlay_label_UP.name = "DebugLabel"
    FT_overlay_label_UP.position = Vector2(10, 10)
    FT_overlay_label_UP.text = "Debug overlay online"
    overlay.add_child(FT_overlay_label_UP)


func FT_apply_depth_IN(node: Node2D, depth: float) -> void:
    var FT_ratio_UP: float = clamp(depth / FT_environment_IN.TE_size_IN.z, 0.0, 1.0)
    var FT_scale_UP: float = lerp(1.0, 0.5, FT_ratio_UP)
    node.scale = Vector2.ONE * FT_scale_UP
    var FT_tint_UP: float = 1.0 - FT_ratio_UP * 0.5
    node.modulate = Color(FT_tint_UP, FT_tint_UP, FT_tint_UP)


func _FT_update_environment_bounds_IN() -> void:
    var FT_tank_UP: Area2D = get_node_or_null("Tank")
    if FT_tank_UP and FT_tank_UP.has_node("CollisionShape2D"):
        var FT_collision_shape_UP: CollisionShape2D = (
            FT_tank_UP.get_node("CollisionShape2D") as CollisionShape2D
        )
        var FT_shape_UP: Shape2D = FT_collision_shape_UP.shape
        if FT_shape_UP is RectangleShape2D:
            var FT_size_UP: Vector2 = FT_shape_UP.size * FT_tank_UP.scale
            var FT_origin_UP: Vector2 = FT_tank_UP.position - FT_size_UP / 2.0
            FT_environment_IN.TE_size_IN = Vector3(
                FT_size_UP.x, FT_size_UP.y, FT_environment_IN.TE_size_IN.z
            )
            FT_environment_IN.TE_boundaries_SH = AABB(
                Vector3(FT_origin_UP.x, FT_origin_UP.y, -FT_environment_IN.TE_size_IN.z / 2.0),
                FT_environment_IN.TE_size_IN
            )
            return

    # Fallback – use viewport
    var FT_rect_UP: Rect2 = get_viewport_rect()
    FT_environment_IN.TE_size_IN = Vector3(
        FT_rect_UP.size.x, FT_rect_UP.size.y, FT_environment_IN.TE_size_IN.z
    )
    FT_environment_IN.TE_boundaries_SH = AABB(
        Vector3(FT_rect_UP.position.x, FT_rect_UP.position.y, -FT_environment_IN.TE_size_IN.z / 2.0),
        FT_environment_IN.TE_size_IN
    )
# gdlint:enable = class-variable-name,function-name,function-variable-name


--- Script: res://tools/ZZZ_TOOL_Gather Scripts.gd ---
@tool
extends EditorScript

# ==================================================
#  File: GatherGDScripts.gd
#  Description:
#   - Recursively gathers all .gd files under res://
#   - Excludes scripts beginning with "X_TOOL_"
#   - Skips the Godot internal ".godot" directory
#   - Writes contents to "res://ScriptCompilation.txt"
# ==================================================

var OUTPUT_FILE: String = "res://CODEX_IGNORE_ScriptCompilation.txt"


func _run() -> void:
    print("=== GatherGDScripts: START ===")

    var out_file = FileAccess.open(OUTPUT_FILE, FileAccess.WRITE)
    if not out_file:
        push_error("Cannot open '%s' for writing." % OUTPUT_FILE)
        return

    out_file.store_line("=== Script Compilation ===\n")

    var gd_paths = _find_gd_files("res://")
    if gd_paths.size() == 0:
        out_file.store_line("No .gd files found under res://.")
        out_file.close()
        return

    for gd_file_path in gd_paths:
        out_file.store_line("\n--- Script: %s ---" % gd_file_path)
        var script_file = FileAccess.open(gd_file_path, FileAccess.READ)
        if script_file:
            var content = script_file.get_as_text()
            out_file.store_line(content)
            script_file.close()
        else:
            out_file.store_line("Could not open %s for reading." % gd_file_path)

    out_file.close()

    print("Wrote script compilation to: %s" % OUTPUT_FILE)
    print("=== GatherGDScripts: DONE ===")


func _find_gd_files(base_dir: String) -> Array:
    var results = []
    var dir = DirAccess.open(base_dir)
    if not dir:
        return results

    dir.list_dir_begin()
    while true:
        var fname = dir.get_next()
        if fname == "":
            break

        # Skip hidden/system files and Godot's internal directory
        if fname.begins_with(".") or fname == ".godot":
            continue

        var full_path = base_dir.path_join(fname)
        if dir.current_is_dir():
            results += _find_gd_files(full_path)
        else:
            var low = fname.to_lower()
            if low.ends_with(".gd") and not fname.begins_with("X_TOOL_"):
                results.append(full_path)

    dir.list_dir_end()
    return results

