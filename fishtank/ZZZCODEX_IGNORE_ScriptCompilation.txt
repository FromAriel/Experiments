=== Script Compilation ===


--- Script: res://art/shape_generator.gd ---
###############################################################
# fishtank/art/shape_generator.gd
# Key Classes      • ShapeGenerator – generates placeholder textures
# Key Functions    • SG_generate_shapes_IN() – writes ellipse and triangle images
# Dependencies     • None
# Last Major Rev   • 24-06-30 – initial creation
###############################################################
# gdlint:disable = function-variable-name,function-name,loop-variable-name

class_name ShapeGenerator
extends Node


func SG_generate_shapes_IN() -> void:
    var SG_ellipse_image_UP := _SG_create_ellipse_IN(64, 32, Color.WHITE)
    SG_ellipse_image_UP.save_png("res://art/ellipse_placeholder.png")
    var SG_triangle_image_UP := _SG_create_triangle_IN(64, 64, Color.WHITE)
    SG_triangle_image_UP.save_png("res://art/triangle_placeholder.png")


func _SG_create_ellipse_IN(width: int, height: int, color: Color) -> Image:
    var SG_img_UP := Image.create(width, height, false, Image.FORMAT_RGBA8)
    SG_img_UP.fill(Color.TRANSPARENT)
    var SG_rx_UP := width / 2.0
    var SG_ry_UP := height / 2.0
    for SG_y_IN in range(height):
        for SG_x_IN in range(width):
            var SG_dx_UP: float = (SG_x_IN - SG_rx_UP + 0.5) / SG_rx_UP
            var SG_dy_UP: float = (SG_y_IN - SG_ry_UP + 0.5) / SG_ry_UP
            if SG_dx_UP * SG_dx_UP + SG_dy_UP * SG_dy_UP <= 1.0:
                SG_img_UP.set_pixel(SG_x_IN, SG_y_IN, color)
    return SG_img_UP


func _SG_create_triangle_IN(width: int, height: int, color: Color) -> Image:
    var SG_img_UP := Image.create(width, height, false, Image.FORMAT_RGBA8)
    SG_img_UP.fill(Color.TRANSPARENT)
    var SG_center_UP := width / 2.0
    for SG_y_IN in range(height):
        var SG_ratio_UP: float = float(SG_y_IN) / max(height - 1, 1)
        var SG_half_width_UP: float = (width * SG_ratio_UP) / 2.0
        for SG_x_IN in range(width):
            if abs(SG_x_IN - SG_center_UP) <= SG_half_width_UP:
                SG_img_UP.set_pixel(SG_x_IN, SG_y_IN, color)
    return SG_img_UP
# gdlint:enable = function-variable-name,function-name,loop-variable-name


--- Script: res://scripts/boids/boid_fish.gd ---
###############################################################
# fishtank/scripts/boids/boid_fish.gd
# Key Classes      • BoidFish – minimal boid entity
# Dependencies     • fish_archetype.gd, tank_environment.gd
# Last Major Rev   • 24-07-05 – initial creation
###############################################################
# gdlint:disable = class-variable-name,function-name,function-variable-name

class_name BoidFish
extends Node2D

const TankEnvironment = preload("res://scripts/data/tank_environment.gd")

var BF_velocity_UP: Vector2 = Vector2.ZERO
var BF_archetype_IN: FishArchetype
var BF_group_id_SH: int = 0
var BF_isolated_timer_UP: float = 0.0
var BF_depth_UP: float = 0.0
var BF_environment_IN: TankEnvironment


func _ready() -> void:
    set_process(true)


func _process(_delta: float) -> void:
    if BF_velocity_UP != Vector2.ZERO:
        rotation = BF_velocity_UP.angle()
    if BF_environment_IN != null:
        _BF_apply_depth_IN()


func _BF_apply_depth_IN() -> void:
    var BF_ratio_UP: float = clamp(
        (BF_environment_IN.TE_size_IN.z - BF_depth_UP) / BF_environment_IN.TE_size_IN.z,
        0.0,
        1.0,
    )
    var BF_scale_UP: float = lerp(0.5, 1.0, BF_ratio_UP)
    scale = Vector2.ONE * BF_scale_UP
    modulate.a = lerp(0.4, 1.0, BF_ratio_UP)


--- Script: res://scripts/boids/boid_system.gd ---
###############################################################
# fishtank/scripts/boids/boid_system.gd
# Key Classes      • BoidSystem – manages fish boids
# Key Functions    • BS_spawn_population_IN() – instantiate fish
#                   • _physics_process() – update boids
# Critical Consts  • BS_neighbor_radius_IN: float
# Dependencies     • boid_system_config.gd, fish_archetype.gd, boid_fish.gd
# Last Major Rev   • 24-07-05 – initial creation
###############################################################
# gdlint:disable = class-variable-name,function-name,function-variable-name,loop-variable-name

class_name BoidSystem
extends Node2D

@export var BS_config_IN: BoidSystemConfig
@export var BS_fish_scene_IN: PackedScene
@export var BS_neighbor_radius_IN: float = 80.0
@export var BS_separation_distance_IN: float = 40.0
@export var BS_environment_IN: TankEnvironment
@export var BS_group_count_IN: int = 6
@export var BS_boundary_margin_IN: float = 1.0
@export var BS_grid_cell_size_IN: float = 100.0

var BS_fish_nodes_SH: Array[BoidFish] = []
var BS_rng_UP := RandomNumberGenerator.new()
var BS_grid_SH: Dictionary = {}


func _ready() -> void:
    if BS_config_IN == null:
        BS_config_IN = BoidSystemConfig.new()
    if BS_fish_scene_IN == null:
        BS_fish_scene_IN = preload("res://scenes/BoidFish.tscn")
    if BS_environment_IN == null:
        var BS_parent_UP: Node = get_parent()
        if BS_parent_UP != null and BS_parent_UP is FishTank:
            BS_environment_IN = BS_parent_UP.FT_environment_IN
        else:
            BS_environment_IN = TankEnvironment.new()
    BS_rng_UP.randomize()


func BS_spawn_population_IN(archetypes: Array[FishArchetype]) -> void:
    if archetypes.is_empty():
        return
    var BS_count_UP: int = BS_rng_UP.randi_range(
        BS_config_IN.BC_fish_count_min_IN, BS_config_IN.BC_fish_count_max_IN
    )
    for i in range(BS_count_UP):
        var BS_arch_UP: FishArchetype = archetypes[BS_rng_UP.randi_range(0, archetypes.size() - 1)]
        _BS_spawn_fish_IN(BS_arch_UP)


func _BS_spawn_fish_IN(arch: FishArchetype) -> void:
    var BS_fish_UP: BoidFish = BS_fish_scene_IN.instantiate()
    if BS_environment_IN != null:
        var BS_bounds_UP: AABB = BS_environment_IN.TE_boundaries_SH
        var BS_center_UP := BS_bounds_UP.position + BS_bounds_UP.size / 2.0
        BS_fish_UP.position = Vector2(BS_center_UP.x, BS_center_UP.y)
        BS_fish_UP.BF_depth_UP = (
            BS_rng_UP
            . randf_range(
                0.0,
                BS_environment_IN.TE_size_IN.z,
            )
        )
        BS_fish_UP.BF_environment_IN = BS_environment_IN
    else:
        BS_fish_UP.position = Vector2(
            BS_rng_UP.randf_range(-50, 50), BS_rng_UP.randf_range(-30, 30)
        )
        BS_fish_UP.BF_depth_UP = 0.0
    BS_fish_UP.BF_archetype_IN = arch
    BS_fish_UP.BF_group_id_SH = BS_rng_UP.randi_range(0, max(1, BS_group_count_IN) - 1)
    add_child(BS_fish_UP)
    BS_fish_nodes_SH.append(BS_fish_UP)


func _physics_process(delta: float) -> void:
    _BS_update_grid_IN()
    for BS_fish_UP in BS_fish_nodes_SH:
        _BS_update_fish_IN(BS_fish_UP, delta)
        _BS_apply_sanity_check_IN(BS_fish_UP, delta)


func _BS_update_grid_IN() -> void:
    BS_grid_SH.clear()
    for BS_fish_UP in BS_fish_nodes_SH:
        var BS_p_UP: Vector2 = BS_fish_UP.position
        var BS_cell_UP := Vector2i(
            floor(BS_p_UP.x / BS_grid_cell_size_IN), floor(BS_p_UP.y / BS_grid_cell_size_IN)
        )
        if not BS_grid_SH.has(BS_cell_UP):
            BS_grid_SH[BS_cell_UP] = []
        BS_grid_SH[BS_cell_UP].append(BS_fish_UP)


func _BS_update_fish_IN(fish: BoidFish, delta: float) -> void:
    var BS_sep_UP := Vector2.ZERO
    var BS_ali_UP := Vector2.ZERO
    var BS_coh_UP := Vector2.ZERO
    var BS_count_UP := 0
    var BS_cell_UP := Vector2i(
        floor(fish.position.x / BS_grid_cell_size_IN), floor(fish.position.y / BS_grid_cell_size_IN)
    )
    for dx in range(-1, 2):
        for dy in range(-1, 2):
            var BS_key_UP := Vector2i(BS_cell_UP.x + dx, BS_cell_UP.y + dy)
            if not BS_grid_SH.has(BS_key_UP):
                continue
            for BS_other_UP in BS_grid_SH[BS_key_UP]:
                var BS_other_fish_UP: BoidFish = BS_other_UP
                if BS_other_fish_UP == fish:
                    continue
                var BS_diff_UP: Vector2 = BS_other_fish_UP.position - fish.position
                var BS_dist_UP: float = BS_diff_UP.length()
                if BS_dist_UP < BS_neighbor_radius_IN:
                    BS_ali_UP += BS_other_fish_UP.BF_velocity_UP
                    BS_coh_UP += BS_other_fish_UP.position
                    BS_count_UP += 1
                    if BS_dist_UP < BS_separation_distance_IN and BS_dist_UP > 0.0:
                        BS_sep_UP -= BS_diff_UP / BS_dist_UP

    var BS_align_weight_UP := _BS_get_weight_IN(
        fish.BF_archetype_IN, "FA_alignment_weight_IN", BS_config_IN.BC_default_alignment_IN
    )
    var BS_cohes_weight_UP := _BS_get_weight_IN(
        fish.BF_archetype_IN, "FA_cohesion_weight_IN", BS_config_IN.BC_default_cohesion_IN
    )
    var BS_separ_weight_UP := _BS_get_weight_IN(
        fish.BF_archetype_IN, "FA_separation_weight_IN", BS_config_IN.BC_default_separation_IN
    )
    var BS_wander_weight_UP := _BS_get_weight_IN(
        fish.BF_archetype_IN, "FA_wander_weight_IN", BS_config_IN.BC_default_wander_IN
    )

    var BS_steer_UP := Vector2.ZERO
    if BS_count_UP > 0:
        BS_ali_UP = (
            (BS_ali_UP / BS_count_UP).normalized() * BS_config_IN.BC_max_speed_IN
            - fish.BF_velocity_UP
        )
        BS_ali_UP = BS_ali_UP.limit_length(BS_config_IN.BC_max_force_IN)

        BS_coh_UP = (BS_coh_UP / BS_count_UP) - fish.position
        if BS_coh_UP != Vector2.ZERO:
            BS_coh_UP = BS_coh_UP.normalized() * BS_config_IN.BC_max_speed_IN - fish.BF_velocity_UP
            BS_coh_UP = BS_coh_UP.limit_length(BS_config_IN.BC_max_force_IN)

        BS_sep_UP = BS_sep_UP / BS_count_UP
        if BS_sep_UP != Vector2.ZERO:
            BS_sep_UP = BS_sep_UP.normalized() * BS_config_IN.BC_max_speed_IN - fish.BF_velocity_UP
            BS_sep_UP = BS_sep_UP.limit_length(BS_config_IN.BC_max_force_IN)

        BS_steer_UP += BS_ali_UP * BS_align_weight_UP
        BS_steer_UP += BS_coh_UP * BS_cohes_weight_UP
        BS_steer_UP += BS_sep_UP * BS_separ_weight_UP
        fish.BF_isolated_timer_UP = 0.0
    else:
        fish.BF_isolated_timer_UP += delta

    if fish.BF_isolated_timer_UP > 5.0:
        fish.BF_group_id_SH = BS_rng_UP.randi_range(0, max(1, BS_group_count_IN) - 1)
        fish.BF_isolated_timer_UP = 0.0

    var BS_wander_UP := (
        Vector2(BS_rng_UP.randf_range(-1.0, 1.0), BS_rng_UP.randf_range(-1.0, 1.0)).normalized()
    )
    BS_wander_UP *= BS_wander_weight_UP * BS_config_IN.BC_max_force_IN
    BS_steer_UP += BS_wander_UP

    if BS_environment_IN != null:
        var BS_bounds_UP: AABB = BS_environment_IN.TE_boundaries_SH
        var BS_min_x_UP: float = BS_bounds_UP.position.x + BS_boundary_margin_IN
        var BS_max_x_UP: float = (
            BS_bounds_UP.position.x + BS_bounds_UP.size.x - BS_boundary_margin_IN
        )
        var BS_min_y_UP: float = BS_bounds_UP.position.y + BS_boundary_margin_IN
        var BS_max_y_UP: float = (
            BS_bounds_UP.position.y + BS_bounds_UP.size.y - BS_boundary_margin_IN
        )
        if fish.position.x < BS_min_x_UP:
            BS_steer_UP.x += BS_config_IN.BC_max_force_IN
        elif fish.position.x > BS_max_x_UP:
            BS_steer_UP.x -= BS_config_IN.BC_max_force_IN
        if fish.position.y < BS_min_y_UP:
            BS_steer_UP.y += BS_config_IN.BC_max_force_IN
        elif fish.position.y > BS_max_y_UP:
            BS_steer_UP.y -= BS_config_IN.BC_max_force_IN

    var BS_vel_UP := fish.BF_velocity_UP + BS_steer_UP * delta
    BS_vel_UP = BS_vel_UP.limit_length(BS_config_IN.BC_max_speed_IN)
    fish.position += BS_vel_UP * delta
    fish.BF_velocity_UP = BS_vel_UP
    if BS_environment_IN != null:
        fish.BF_depth_UP += BS_rng_UP.randf_range(-20.0, 20.0) * delta
        fish.BF_depth_UP = clamp(
            fish.BF_depth_UP,
            0.0,
            BS_environment_IN.TE_size_IN.z,
        )


func _BS_get_weight_IN(arch: FishArchetype, field: String, default_val: float) -> float:
    if arch != null:
        var val = arch.get(field)
        if typeof(val) == TYPE_FLOAT:
            return val
    return default_val


func _BS_apply_sanity_check_IN(fish: BoidFish, delta: float) -> void:
    if BS_environment_IN == null:
        return
    var BS_bounds_UP: AABB = BS_environment_IN.TE_boundaries_SH
    var BS_center_UP := BS_bounds_UP.position + BS_bounds_UP.size / 2.0
    var BS_min_x_UP: float = BS_bounds_UP.position.x
    var BS_max_x_UP: float = BS_bounds_UP.position.x + BS_bounds_UP.size.x
    var BS_min_y_UP: float = BS_bounds_UP.position.y
    var BS_max_y_UP: float = BS_bounds_UP.position.y + BS_bounds_UP.size.y
    var BS_margin_UP: float = BS_boundary_margin_IN * 0.5
    var BS_near_edge := (
        fish.position.x < BS_min_x_UP + BS_margin_UP
        or fish.position.x > BS_max_x_UP - BS_margin_UP
        or fish.position.y < BS_min_y_UP + BS_margin_UP
        or fish.position.y > BS_max_y_UP - BS_margin_UP
    )
    var BS_outside := (
        fish.position.x < BS_min_x_UP
        or fish.position.x > BS_max_x_UP
        or fish.position.y < BS_min_y_UP
        or fish.position.y > BS_max_y_UP
    )
    if BS_near_edge or BS_outside:
        var BS_push_dir := (Vector2(BS_center_UP.x, BS_center_UP.y) - fish.position).normalized()
        fish.BF_velocity_UP = fish.BF_velocity_UP.move_toward(
            BS_push_dir * BS_config_IN.BC_max_speed_IN, delta * 2.0
        )


--- Script: res://scripts/data/archetype_loader.gd ---
###############################################################
# fishtank/scripts/data/archetype_loader.gd
# Key Classes      • ArchetypeLoader – loads archetype data
# Key Functions    • AL_load_archetypes_IN() – parse JSON to resources
# Critical Consts  • AL_default_texture_IN: Texture2D
# Editor Exports   • None
# Dependencies     • fish_archetype.gd
# Last Major Rev   • 24-06-28 – initial creation
###############################################################
# gdlint:disable = class-variable-name,function-name,function-variable-name,loop-variable-name

class_name ArchetypeLoader
extends Node

var AL_default_texture_IN: Texture2D


func _init() -> void:
    var AL_shape_gen_UP: Node = load("res://art/shape_generator.gd").new()
    AL_shape_gen_UP.SG_generate_shapes_IN()
    var AL_default_path_UP := "res://art/ellipse_placeholder.png"
    if ResourceLoader.exists(AL_default_path_UP):
        AL_default_texture_IN = load(AL_default_path_UP)
    else:
        AL_default_texture_IN = preload("res://art/placeholder_fish.png")


func AL_load_archetypes_IN(json_path: String) -> Array[FishArchetype]:
    var AL_archetypes_UP: Array[FishArchetype] = []
    if not FileAccess.file_exists(json_path):
        push_error("Archetype JSON not found: %s" % json_path)
        return AL_archetypes_UP

    var AL_json_string_UP = FileAccess.get_file_as_string(json_path)
    var AL_parser_UP := JSON.new()
    var AL_error_UP = AL_parser_UP.parse(AL_json_string_UP)
    if AL_error_UP != OK:
        push_error("Failed to parse %s: %s" % [json_path, AL_error_UP])
        return AL_archetypes_UP

    for AL_entry_UP in AL_parser_UP.data:
        var AL_resource_UP := FishArchetype.new()
        AL_resource_UP.FA_name_IN = AL_entry_UP.get("name", "")
        AL_resource_UP.FA_species_list_IN = []
        for AL_species_UP in AL_entry_UP.get("species_list", []):
            AL_resource_UP.FA_species_list_IN.append(str(AL_species_UP))

        var AL_tex_path_UP: String = AL_entry_UP.get("placeholder_texture", "")
        if AL_tex_path_UP != "" and ResourceLoader.exists(AL_tex_path_UP):
            AL_resource_UP.FA_placeholder_texture_IN = load(AL_tex_path_UP)
        else:
            AL_resource_UP.FA_placeholder_texture_IN = AL_default_texture_IN

        AL_resource_UP.FA_base_color_IN = Color(AL_entry_UP.get("base_color", "#ffffff"))
        AL_archetypes_UP.append(AL_resource_UP)

    return AL_archetypes_UP
# gdlint:enable = class-variable-name,function-name,function-variable-name,loop-variable-name


--- Script: res://scripts/data/boid_system_config.gd ---
###############################################################
# fishtank/scripts/data/boid_system_config.gd
# Key Classes      • BoidSystemConfig – default boid parameters
# Key Functions    • N/A
# Critical Consts  • None
# Editor Exports   • BC_default_alignment_IN: float
# Dependencies     • None
# Last Major Rev   • 24-06-28 – initial creation
###############################################################

class_name BoidSystemConfig
extends Resource

# gdlint:disable = class-variable-name

"""
Configurable constants controlling the default boid behavior parameters.
"""

@export var BC_default_alignment_IN: float = 1.0
@export var BC_default_cohesion_IN: float = 1.0
@export var BC_default_separation_IN: float = 1.5
@export var BC_default_wander_IN: float = 0.5
@export var BC_max_speed_IN: float = 200.0
@export var BC_max_force_IN: float = 50.0
@export var BC_fish_count_min_IN: int = 50
@export var BC_fish_count_max_IN: int = 60
@export var BC_archetype_count_min_IN: int = 3
@export var BC_archetype_count_max_IN: int = 5
@export var BC_misc_params_SH: Dictionary = {}
# gdlint:enable = class-variable-name


--- Script: res://scripts/data/fish_archetype.gd ---
###############################################################
# fishtank/scripts/data/fish_archetype.gd
# Key Classes      • FishArchetype – archetype configuration
# Key Functions    • N/A
# Critical Consts  • None
# Editor Exports   • FA_name_IN: String
# Dependencies     • None
# Last Major Rev   • 24-06-28 – initial creation
###############################################################

class_name FishArchetype
extends Resource

# gdlint:disable = class-variable-name

"""
Holds configuration data defining behaviors and visuals for a fish archetype.
"""

@export var FA_name_IN: String = ""
@export var FA_species_list_IN: Array[String] = []
@export var FA_placeholder_texture_IN: Texture2D
@export var FA_base_color_IN: Color = Color.WHITE
@export var FA_size_IN: float = 1.0
@export var FA_group_tendency_IN: float = 0.5
@export var FA_preferred_zone_IN: Vector3 = Vector3.ZERO
@export var FA_activity_pattern_IN: String = ""
@export var FA_aggression_level_IN: float = 0.0
@export var FA_alignment_weight_IN: float = 1.0
@export var FA_cohesion_weight_IN: float = 1.0
@export var FA_separation_weight_IN: float = 1.5
@export var FA_wander_weight_IN: float = 0.5
@export var FA_obstacle_bias_IN: float = 1.0
@export var FA_display_chance_IN: float = 0.0
@export var FA_burst_chance_IN: float = 0.0
@export var FA_chase_chance_IN: float = 0.0
@export var FA_jump_chance_IN: float = 0.0
@export var FA_rest_chance_IN: float = 0.0
@export var FA_special_notes_IN: String = ""
# gdlint:enable = class-variable-name


--- Script: res://scripts/data/fish_instance.gd ---
###############################################################
# fishtank/scripts/data/fish_instance.gd
# Key Classes      • FishInstance – runtime fish data
# Key Functions    • N/A
# Critical Consts  • None
# Editor Exports   • FI_unique_id_IN: int
# Dependencies     • FishArchetype
# Last Major Rev   • 24-06-28 – initial creation
###############################################################

class_name FishInstance
extends Resource

# gdlint:disable = class-variable-name

"""
Data container for a single fish in the tank at runtime.
"""

@export var FI_unique_id_IN: int = 0
@export var FI_position_UP: Vector3 = Vector3.ZERO
@export var FI_velocity_UP: Vector3 = Vector3.ZERO
@export var FI_state_SH: String = ""
@export var FI_archetype_ref_SH: FishArchetype
@export var FI_assigned_species_IN: String = ""
@export var FI_age_UP: float = 0.0
@export var FI_animation_state_UP: String = ""
@export var FI_selected_SH: bool = false
# gdlint:enable = class-variable-name


--- Script: res://scripts/data/tank_environment.gd ---
###############################################################
# fishtank/scripts/data/tank_environment.gd
# Key Classes      • TankEnvironment – tank parameters and population
# Key Functions    • TE_update_bounds_IN() – calculate tank AABB
# Critical Consts  • None
# Editor Exports   • TE_size_IN: Vector3
# Dependencies     • FishInstance
# Last Major Rev   • 24-06-30 – compute tank bounds
###############################################################

class_name TankEnvironment
extends Resource

# gdlint:disable = class-variable-name,function-name

"""
Encapsulates the environment settings and fish population of the aquarium.
"""

@export var TE_size_IN: Vector3 = Vector3(16.0, 9.0, 5.5)
@export var TE_boundaries_SH: AABB = AABB()
@export var TE_decor_objects_SH: Array[PackedScene] = []
@export var TE_lighting_params_IN: Dictionary = {}
@export var TE_water_params_IN: Dictionary = {}
@export var TE_population_SH: Array[FishInstance] = []


func _init() -> void:
    TE_update_bounds_IN()


func TE_update_bounds_IN() -> void:
    TE_boundaries_SH = AABB(
        Vector3(-TE_size_IN.x / 2.0, -TE_size_IN.y / 2.0, -TE_size_IN.z / 2.0), TE_size_IN
    )
# gdlint:enable = class-variable-name,function-name


--- Script: res://scripts/fish_tank.gd ---
###############################################################
# gdlint:disable = class-variable-name,function-name,function-variable-name
# fishtank/scripts/fish_tank.gd
# Key Classes      • FishTank – root controller for the aquarium
# Key Functions    • _ready() – initialize tank and debug overlay
#                   FT_apply_depth_IN() – apply pseudo-3D transform
# Dependencies     • archetype_loader.gd, tank_environment.gd
# Last Major Rev   • 24-06-30 – add debug overlay and depth logic
###############################################################

class_name FishTank
extends Node2D

@export var FT_environment_IN: TankEnvironment
var FT_overlay_label_UP: Label


func _ready() -> void:
    FT_overlay_label_UP = $DebugOverlay/DebugLabel
    if FT_environment_IN == null:
        FT_environment_IN = TankEnvironment.new()
    _FT_update_environment_bounds_IN()
    var FT_loader_IN := ArchetypeLoader.new()
    var FT_archetypes_UP := FT_loader_IN.AL_load_archetypes_IN("res://data/archetypes.json")
    var FT_boid_system_UP: BoidSystem = $BoidSystem
    if FT_boid_system_UP.BS_config_IN == null:
        FT_boid_system_UP.BS_config_IN = BoidSystemConfig.new()
    FT_boid_system_UP.BS_spawn_population_IN(FT_archetypes_UP)
    FT_overlay_label_UP.text = "Loaded %d archetypes" % FT_archetypes_UP.size()


func FT_apply_depth_IN(node: Node2D, depth: float) -> void:
    var FT_ratio_UP: float = clamp(depth / FT_environment_IN.TE_size_IN.z, 0.0, 1.0)
    var FT_scale_UP: float = lerp(1.0, 0.5, FT_ratio_UP)
    node.scale = Vector2.ONE * FT_scale_UP
    var FT_tint_UP: float = 1.0 - FT_ratio_UP * 0.5
    node.modulate = Color(FT_tint_UP, FT_tint_UP, FT_tint_UP)


func _FT_update_environment_bounds_IN() -> void:
    var FT_tank_UP: Area2D = get_node_or_null("Tank")
    if FT_tank_UP and FT_tank_UP.has_node("CollisionShape2D"):
        var FT_collision_shape_UP: CollisionShape2D = (
            FT_tank_UP.get_node("CollisionShape2D") as CollisionShape2D
        )
        var FT_shape_UP: Shape2D = FT_collision_shape_UP.shape
        if FT_shape_UP is RectangleShape2D:
            var FT_size_UP: Vector2 = FT_shape_UP.size * FT_tank_UP.scale
            var FT_origin_UP: Vector2 = FT_tank_UP.position - FT_size_UP / 2.0
            FT_environment_IN.TE_size_IN = Vector3(
                FT_size_UP.x, FT_size_UP.y, FT_environment_IN.TE_size_IN.z
            )
            FT_environment_IN.TE_boundaries_SH = AABB(
                Vector3(FT_origin_UP.x, FT_origin_UP.y, -FT_environment_IN.TE_size_IN.z / 2.0),
                FT_environment_IN.TE_size_IN
            )
            return

    var FT_rect_UP: Rect2 = get_viewport_rect()
    FT_environment_IN.TE_size_IN = Vector3(
        FT_rect_UP.size.x, FT_rect_UP.size.y, FT_environment_IN.TE_size_IN.z
    )
    FT_environment_IN.TE_boundaries_SH = AABB(
        Vector3(
            FT_rect_UP.position.x, FT_rect_UP.position.y, -FT_environment_IN.TE_size_IN.z / 2.0
        ),
        FT_environment_IN.TE_size_IN
    )
# gdlint:enable = class-variable-name,function-name,function-variable-name


--- Script: res://tools/ZZZ_TOOL_Gather Scripts.gd ---
@tool
extends EditorScript

# ==================================================
#  File: GatherGDScripts.gd
#  Description:
#   - Recursively gathers all .gd files under res://
#   - Excludes scripts beginning with "X_TOOL_"
#   - Skips the Godot internal ".godot" directory
#   - Writes contents to "res://ScriptCompilation.txt"
# ==================================================

var OUTPUT_FILE: String = "res://CODEX_IGNORE_ScriptCompilation.txt"


func _run() -> void:
    print("=== GatherGDScripts: START ===")

    var out_file = FileAccess.open(OUTPUT_FILE, FileAccess.WRITE)
    if not out_file:
        push_error("Cannot open '%s' for writing." % OUTPUT_FILE)
        return

    out_file.store_line("=== Script Compilation ===\n")

    var gd_paths = _find_gd_files("res://")
    if gd_paths.size() == 0:
        out_file.store_line("No .gd files found under res://.")
        out_file.close()
        return

    for gd_file_path in gd_paths:
        out_file.store_line("\n--- Script: %s ---" % gd_file_path)
        var script_file = FileAccess.open(gd_file_path, FileAccess.READ)
        if script_file:
            var content = script_file.get_as_text()
            out_file.store_line(content)
            script_file.close()
        else:
            out_file.store_line("Could not open %s for reading." % gd_file_path)

    out_file.close()

    print("Wrote script compilation to: %s" % OUTPUT_FILE)
    print("=== GatherGDScripts: DONE ===")


func _find_gd_files(base_dir: String) -> Array:
    var results = []
    var dir = DirAccess.open(base_dir)
    if not dir:
        return results

    dir.list_dir_begin()
    while true:
        var fname = dir.get_next()
        if fname == "":
            break

        # Skip hidden/system files and Godot's internal directory
        if fname.begins_with(".") or fname == ".godot":
            continue

        var full_path = base_dir.path_join(fname)
        if dir.current_is_dir():
            results += _find_gd_files(full_path)
        else:
            var low = fname.to_lower()
            if low.ends_with(".gd") and not fname.begins_with("X_TOOL_"):
                results.append(full_path)

    dir.list_dir_end()
    return results
